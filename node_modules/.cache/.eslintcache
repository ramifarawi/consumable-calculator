[{"/Users/work/Desktop/consumable-calculator/src/index.js":"1","/Users/work/Desktop/consumable-calculator/src/App.js":"2","/Users/work/Desktop/consumable-calculator/src/reportWebVitals.js":"3","/Users/work/Desktop/consumable-calculator/src/components/EditableRow.js":"4","/Users/work/Desktop/consumable-calculator/src/components/ReadOnlyRow.js":"5","/Users/work/Desktop/consumable-calculator/src/calculator.js":"6","/Users/work/consumable-calculator/src/index.js":"7","/Users/work/consumable-calculator/src/App.js":"8","/Users/work/consumable-calculator/src/components/ReadOnlyRow.js":"9","/Users/work/consumable-calculator/src/components/EditableRow.js":"10","/Users/work/consumable-calculator/src/calculator.js":"11"},{"size":219,"mtime":1628013837027,"results":"12","hashOfConfig":"13"},{"size":6265,"mtime":1628709613905,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":1627999422111,"results":"15","hashOfConfig":"16"},{"size":1449,"mtime":1628103542493,"results":"17","hashOfConfig":"13"},{"size":609,"mtime":1628021132171,"results":"18","hashOfConfig":"13"},{"size":3206,"mtime":1629738724319,"results":"19","hashOfConfig":"13"},{"size":219,"mtime":1628013837027,"results":"20","hashOfConfig":"21"},{"size":6273,"mtime":1631207201465,"results":"22","hashOfConfig":"21"},{"size":609,"mtime":1628021132171,"results":"23","hashOfConfig":"21"},{"size":1449,"mtime":1628103542493,"results":"24","hashOfConfig":"21"},{"size":3206,"mtime":1629738724319,"results":"25","hashOfConfig":"21"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"svz1rh",{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1s5y8sr",{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"sxt2e3",{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/work/Desktop/consumable-calculator/src/index.js",[],"/Users/work/Desktop/consumable-calculator/src/App.js",["50"],"import React, { useState, Fragment } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport \"./App.css\";\nimport data from \"./mock-data.json\";\nimport ReadOnlyRow from \"./components/ReadOnlyRow.js\";\nimport EditableRow from \"./components/EditableRow.js\";\nimport  Find_labware from \"./calculator\";\n\n\nconst App = () => {\n  const [contacts, setContacts] = useState(data);\n\n\n  const [addFormData, setAddFormData] = useState({\n    liquid_name: \"\",\n    vol_per_multiplier: \"\",\n    multiplier: \"\",\n    single_or_multi: \"\",\n  });\n\n  const [editFormData, setEditFormData] = useState({\n    liquid_name: \"\",\n    vol_per_multiplier: \"\",\n    multiplier: \"\",\n    single_or_multi: \"\",\n  });\n\n  const [editContactId, setEditContactId] = useState(null);\n\n  const liquidRecommendedLabware = {}\n  contacts.forEach((contact) => {\n    const castedContact = {\n      ...contact,\n      vol_per_multiplier: Number(contact.vol_per_multiplier),\n      multiplier: Number(contact.multiplier),\n      // vol: Number(multiplier*vol_per_multiplier)\n    }\n    liquidRecommendedLabware[contact.liquid_name] = Find_labware(contact)\n    // liquidRecommendedLabware[contact] = total_volume(contact)\n  })\n  console.log(liquidRecommendedLabware)\n\n\n  const handleAddFormChange = (event) => {\n    event.preventDefault();\n\n    const fieldName = event.target.getAttribute(\"name\");\n    const fieldValue = event.target.value;\n\n    const newFormData = { ...addFormData };\n    newFormData[fieldName] = fieldValue;\n\n    setAddFormData(newFormData);\n  };\n\n  const handleEditFormChange = (event) => {\n    event.preventDefault();\n\n    const fieldName = event.target.getAttribute(\"name\");\n    const fieldValue = event.target.value;\n\n    const newFormData = { ...editFormData };\n    newFormData[fieldName] = fieldValue;\n\n    setEditFormData(newFormData);\n  };\n\n  const handleAddFormSubmit = (event) => {\n    event.preventDefault();\n\n    const newContact = {\n      id: nanoid(),\n      liquid_name: addFormData.liquid_name,\n      vol_per_multiplier: addFormData.vol_per_multiplier,\n      multiplier: addFormData.multiplier,\n      single_or_multi: addFormData.single_or_multi,\n    };\n\n    const newContacts = [...contacts, newContact];\n    setContacts(newContacts);\n  };\n\n  const handleEditFormSubmit = (event) => {\n    event.preventDefault();\n\n    const editedContact = {\n      id: editContactId,\n      liquid_name: editFormData.liquid_name,\n      vol_per_multiplier: editFormData.vol_per_multiplier,\n      multiplier: editFormData.multiplier,\n      single_or_multi: editFormData.single_or_multi,\n    };\n\n    const newContacts = [...contacts];\n\n    const index = contacts.findIndex((contact) => contact.id === editContactId);\n\n    newContacts[index] = editedContact;\n\n    setContacts(newContacts);\n    setEditContactId(null);\n  };\n\n  const handleEditClick = (event, contact) => {\n    event.preventDefault();\n    setEditContactId(contact.id);\n\n    const formValues = {\n      liquid_name: contact.liquid_name,\n      vol_per_multiplier: contact.vol_per_multiplier,\n      multiplier: contact.multiplier,\n      single_or_multi: contact.single_or_multi,\n    };\n\n    setEditFormData(formValues);\n  };\n\n  const handleCancelClick = () => {\n    setEditContactId(null);\n  };\n\n  const handleDeleteClick = (contactId) => {\n    const newContacts = [...contacts];\n\n    const index = contacts.findIndex((contact) => contact.id === contactId);\n\n    newContacts.splice(index, 1);\n\n    setContacts(newContacts);\n  };\n\n\n  return ( <div className=\"app-container\">\n  <form onSubmit={handleEditFormSubmit}>\n    <table>\n      <thead>\n        <tr>\n          <th>Liquid Name</th>\n          <th>Volume per Multiplier (ul)</th>\n          <th>Multiplier (# samples, # washes, etc.)</th>\n          <th>Single or Multi-Channel</th>\n        </tr>\n      </thead>\n      <tbody>\n            {contacts.map((contact) => (\n              <Fragment>\n                {editContactId === contact.id ? (\n                  <EditableRow\n                    editFormData={editFormData}\n                    handleEditFormChange={handleEditFormChange}\n                    handleCancelClick={handleCancelClick}\n                  />\n                ) : (\n                  <ReadOnlyRow\n                    contact={contact}\n                    handleEditClick={handleEditClick}\n                    handleDeleteClick={handleDeleteClick}\n                  />\n                )}\n              </Fragment>\n            ))}\n          </tbody>\n        </table>\n      </form>\n      <h2>Add a Liquid</h2>\n        <form onSubmit={handleAddFormSubmit}>\n          <input\n            type=\"text\"\n            name=\"liquid_name\"\n            required=\"required\"\n            placeholder=\"Liquid\"\n            onChange={handleAddFormChange}\n          />\n          <input\n            type=\"text\"\n            name=\"vol_per_multiplier\"\n            required=\"required\"\n            placeholder=\"Vol Per Multiplier (ul)\"\n            onChange={handleAddFormChange}\n          />\n          <input\n            type=\"text\"\n            name=\"multiplier\"\n            required=\"required\"\n            placeholder=\"Multiplier\"\n            onChange={handleAddFormChange}\n          />\n          <input\n            type=\"text\"\n            name=\"single_or_multi\"\n            required=\"required\"\n            placeholder=\"`Single` or `Multi`\"\n            onChange={handleAddFormChange}\n          />\n          <button type=\"submit\">Add</button>\n        </form>\n\n        {Object.entries(liquidRecommendedLabware).map(liquidInfo => {\n          const liquidName = liquidInfo[0];\n          const volumeText = liquidInfo[1];\n\n\n        return <h3>\n          <form>\n            <table>\n              <thead>\n                <tr>\n                  <th>{liquidName}</th>\n                  <th>Recommended Labware</th>\n                  <th>Total Volume</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr>\n                    <React.Fragment>\n                    <td></td>\n                    <td>{volumeText[0]}</td>\n                    <td>{volumeText[1]}</td>\n                    </React.Fragment>\n                  </tr>\n                  </tbody>\n                </table>\n              </form>\n            </h3>\n            })};\n        </div>\n      );\n    };\n\n\nexport default App;\n","/Users/work/Desktop/consumable-calculator/src/reportWebVitals.js",[],"/Users/work/Desktop/consumable-calculator/src/components/EditableRow.js",[],"/Users/work/Desktop/consumable-calculator/src/components/ReadOnlyRow.js",[],"/Users/work/Desktop/consumable-calculator/src/calculator.js",["51","52","53","54"],"class AssignLabware {\n  constructor(vol_per_multiplier, multiplier, single_or_multi){\n    this.vol_per_multiplier = vol_per_multiplier;\n    this.multiplier = multiplier;\n    this.single_or_multi = single_or_multi;\n    // this.vol = Number(vol_per_multiplier)*Number(multiplier)\n  }\n}\n// console.log(liquid_vol)\n// var liquid1 = new AssignLabware(100, 40, 'Multi');\n\nfunction Find_labware(liquid){\n  let vol = liquid.vol_per_multiplier*liquid.multiplier/1000;\n  // return(vol)\n  let single_or_multi = liquid.single_or_multi;\n  let vol_notation = (vol > 0.5) ? vol : vol*1000\n  let vol_string = vol_notation + ((vol > 0.5) ? 'mL' : 'ul')\n  let left_paren = '('\n  let right_paren = ')'\n\n  let well_ceiling_res = 14\n  let well_ceiling_195mL = 185\n  let well_ceiling_falcon = 45\n  let well_ceiling_15mL = 13\n  let well_ceiling_1500ul = 1.2\n  let well_ceiling_2000ul = 1.7\n\n  if (liquid.single_or_multi == 'Multi') {   // MULTI-CHANNEL ACCESS\n    if (vol > 4 && vol < 185){\n      let num_wells = Math.ceil(vol/well_ceiling_res);\n      if (vol > 50){\n        return([' Nest 12 Well Reservoir ' +  left_paren + num_wells + ' wells' + right_paren +\n               ', or Nest 1 Well Reservior ', vol_string])\n      }\n      else {\n        return([' Nest 12 Well Reservoir ' + left_paren + num_wells + ' wells' + right_paren , vol_string]);\n      }\n\n    }\n    else if (vol >= 50){\n      let labware_count = Math.ceil(vol/well_ceiling_195mL);\n      return([labware_count + ' Nest 1 Well Reservoirs', vol_string] );\n    }\n    else if (vol <= 4) {\n      return(['Well plate' , vol_string]);\n    }\n  }\n\n  if (liquid.single_or_multi == 'Single'){               // SINGLE-CHANNEL ACCESS\n    let num_well_res_12 = Math.ceil(vol/well_ceiling_res);\n    let num_tubes_falcon = Math.ceil(vol/well_ceiling_falcon);\n    let num_tubes_15mL = Math.ceil(vol/well_ceiling_15mL);\n\n    let nest_12_string = ' Nest 12 Well Reservoir' + left_paren + num_well_res_12 + ' wells' + right_paren\n    let nest_1_string = ', Nest 1 Well Reservior'\n    let falcon_50_string = ', Falcon 50mL tubes ' + left_paren + num_tubes_falcon + ' tubes ' + right_paren\n    let tube_15mL_string = ', or 15mL tubes ' + left_paren + num_tubes_15mL + ' tubes' + right_paren\n\n    if (vol > 10 && vol < 185){\n      if (vol > 50){\n        return([nest_12_string + nest_1_string + falcon_50_string + tube_15mL_string , vol_string])\n      }\n      else {\n        return([nest_12_string + falcon_50_string + tube_15mL_string, vol_string])\n      }\n\n    }\n    else if (vol <= 10){\n\n      let num_tubes_1500ul = Math.ceil(vol/well_ceiling_1500ul);\n      let num_tubes_2000ul = Math.ceil(vol/well_ceiling_2000ul);\n\n      let tube_1500ul_string = left_paren + num_tubes_1500ul + right_paren + ' 1.5mL tubes'\n      let tube_2000ul_string = ', or ' + left_paren + num_tubes_2000ul + right_paren + ' 2mL tubes'\n\n      return([tube_1500ul_string + tube_2000ul_string , vol_string]);\n    }\n    else{\n      let labware_count = Math.ceil(vol/well_ceiling_195mL);\n      return([left_paren + labware_count + right_paren + ' Nest 1 Well Reservior(s)', vol_string])\n    }\n  }\n}\n// console.log(find_labware(liquid1.vol));\n\n// module.exports = {find_labware}\nexport default Find_labware;\n","/Users/work/consumable-calculator/src/index.js",[],"/Users/work/consumable-calculator/src/App.js",["55"],"/Users/work/consumable-calculator/src/components/ReadOnlyRow.js",[],"/Users/work/consumable-calculator/src/components/EditableRow.js",[],"/Users/work/consumable-calculator/src/calculator.js",["56","57","58","59"],{"ruleId":"60","severity":1,"message":"61","line":32,"column":11,"nodeType":"62","messageId":"63","endLine":32,"endColumn":24},{"ruleId":"60","severity":1,"message":"64","line":1,"column":7,"nodeType":"62","messageId":"63","endLine":1,"endColumn":20},{"ruleId":"60","severity":1,"message":"65","line":15,"column":7,"nodeType":"62","messageId":"63","endLine":15,"endColumn":22},{"ruleId":"66","severity":1,"message":"67","line":28,"column":30,"nodeType":"68","messageId":"69","endLine":28,"endColumn":32},{"ruleId":"66","severity":1,"message":"67","line":49,"column":30,"nodeType":"68","messageId":"69","endLine":49,"endColumn":32},{"ruleId":"60","severity":1,"message":"61","line":32,"column":11,"nodeType":"62","messageId":"63","endLine":32,"endColumn":24},{"ruleId":"60","severity":1,"message":"64","line":1,"column":7,"nodeType":"62","messageId":"63","endLine":1,"endColumn":20},{"ruleId":"60","severity":1,"message":"65","line":15,"column":7,"nodeType":"62","messageId":"63","endLine":15,"endColumn":22},{"ruleId":"66","severity":1,"message":"67","line":28,"column":30,"nodeType":"68","messageId":"69","endLine":28,"endColumn":32},{"ruleId":"66","severity":1,"message":"67","line":49,"column":30,"nodeType":"68","messageId":"69","endLine":49,"endColumn":32},"no-unused-vars","'castedContact' is assigned a value but never used.","Identifier","unusedVar","'AssignLabware' is defined but never used.","'single_or_multi' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected"]