{"version":3,"sources":["components/ReadOnlyRow.js","components/EditableRow.js","calculator.js","App.js","index.js"],"names":["ReadOnlyRow","contact","handleEditClick","handleDeleteClick","liquid_name","vol_per_multiplier","multiplier","single_or_multi","type","onClick","event","id","EditableRow","editFormData","handleEditFormChange","handleCancelClick","console","log","required","placeholder","name","value","onChange","Find_labware","liquid","vol","vol_string","left_paren","right_paren","num_wells","Math","ceil","nest_12_string","falcon_50_string","tube_15mL_string","App","useState","data","contacts","setContacts","addFormData","setAddFormData","setEditFormData","editContactId","setEditContactId","liquidRecommendedLabware","forEach","Number","handleAddFormChange","preventDefault","fieldName","target","getAttribute","fieldValue","newFormData","formValues","contactId","newContacts","index","findIndex","splice","className","onSubmit","editedContact","map","newContact","nanoid","Object","entries","liquidInfo","liquidName","volumeText","Fragment","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e69f2393.chunk.js","sourcesContent":["import React from \"react\";\n\nconst ReadOnlyRow = ({ contact, handleEditClick, handleDeleteClick }) => {\n  return (\n    <tr>\n      <td>{contact.liquid_name}</td>\n      <td>{contact.vol_per_multiplier}</td>\n      <td>{contact.multiplier}</td>\n      <td>{contact.single_or_multi}</td>\n      <td>\n        <button\n          type=\"button\"\n          onClick={(event) => handleEditClick(event, contact)}\n        >\n          Edit\n        </button>\n        <button type=\"button\" onClick={() => handleDeleteClick(contact.id)}>\n          Delete\n        </button>\n      </td>\n    </tr>\n  );\n};\n\nexport default ReadOnlyRow;\n","import React from \"react\";\n\nconst EditableRow = ({\n  editFormData,\n  handleEditFormChange,\n  handleCancelClick,\n}) => {\n  console.log('in editable row')\n  return (\n    <tr>\n      <td>\n        <input\n          type=\"text\"\n          required=\"required\"\n          placeholder=\"Liquid name\"\n          name=\"liquid_name\"\n          value={editFormData.liquid_name}\n          onChange={handleEditFormChange}\n        ></input>\n      </td>\n      <td>\n        <input\n          type=\"number\"\n          required=\"required\"\n          placeholder=\"Vol Per Multiplier\"\n          name=\"vol_per_multiplier\"\n          value={editFormData.vol_per_multiplier}\n          onChange={handleEditFormChange}\n        ></input>\n      </td>\n      <td>\n        <input\n          type=\"text\"\n          required=\"required\"\n          placeholder=\"Multiplier\"\n          name=\"multiplier\"\n          value={editFormData.multiplier}\n          onChange={handleEditFormChange}\n        ></input>\n      </td>\n      <td>\n        <input\n          type=\"text\"\n          required=\"required\"\n          placeholder=\"`Single` or `Multi`\"\n          name=\"single_or_multi\"\n          value={editFormData.single_or_multi}\n          onChange={handleEditFormChange}\n        ></input>\n      </td>\n      <td>\n        <button type=\"submit\">Save</button>\n        <button type=\"button\" onClick={handleCancelClick}>\n          Cancel\n        </button>\n      </td>\n    </tr>\n  );\n};\n\nexport default EditableRow;\n","class AssignLabware {\n  constructor(vol_per_multiplier, multiplier, single_or_multi){\n    this.vol_per_multiplier = vol_per_multiplier;\n    this.multiplier = multiplier;\n    this.single_or_multi = single_or_multi;\n    // this.vol = Number(vol_per_multiplier)*Number(multiplier)\n  }\n}\n// console.log(liquid_vol)\n// var liquid1 = new AssignLabware(100, 40, 'Multi');\n\nfunction Find_labware(liquid){\n  let vol = liquid.vol_per_multiplier*liquid.multiplier/1000;\n  // return(vol)\n  let single_or_multi = liquid.single_or_multi;\n  let vol_notation = (vol > 0.5) ? vol : vol*1000\n  let vol_string = vol_notation + ((vol > 0.5) ? 'mL' : 'ul')\n  let left_paren = '('\n  let right_paren = ')'\n\n  let well_ceiling_res = 14\n  let well_ceiling_195mL = 185\n  let well_ceiling_falcon = 45\n  let well_ceiling_15mL = 13\n  let well_ceiling_1500ul = 1.2\n  let well_ceiling_2000ul = 1.7\n\n  if (liquid.single_or_multi == 'Multi') {   // MULTI-CHANNEL ACCESS\n    if (vol > 4 && vol < 185){\n      let num_wells = Math.ceil(vol/well_ceiling_res);\n      if (vol > 50){\n        return([' Nest 12 Well Reservoir ' +  left_paren + num_wells + ' wells' + right_paren +\n               ', or Nest 1 Well Reservior ', vol_string])\n      }\n      else {\n        return([' Nest 12 Well Reservoir ' + left_paren + num_wells + ' wells' + right_paren , vol_string]);\n      }\n\n    }\n    else if (vol >= 50){\n      let labware_count = Math.ceil(vol/well_ceiling_195mL);\n      return([labware_count + ' Nest 1 Well Reservoirs', vol_string] );\n    }\n    else if (vol <= 4) {\n      return(['Well plate' , vol_string]);\n    }\n  }\n\n  if (liquid.single_or_multi == 'Single'){               // SINGLE-CHANNEL ACCESS\n    let num_well_res_12 = Math.ceil(vol/well_ceiling_res);\n    let num_tubes_falcon = Math.ceil(vol/well_ceiling_falcon);\n    let num_tubes_15mL = Math.ceil(vol/well_ceiling_15mL);\n\n    let nest_12_string = ' Nest 12 Well Reservoir' + left_paren + num_well_res_12 + ' wells' + right_paren\n    let nest_1_string = ', Nest 1 Well Reservior'\n    let falcon_50_string = ', Falcon 50mL tubes ' + left_paren + num_tubes_falcon + ' tubes ' + right_paren\n    let tube_15mL_string = ', or 15mL tubes ' + left_paren + num_tubes_15mL + ' tubes' + right_paren\n\n    if (vol > 10 && vol < 185){\n      if (vol > 50){\n        return([nest_12_string + nest_1_string + falcon_50_string + tube_15mL_string , vol_string])\n      }\n      else {\n        return([nest_12_string + falcon_50_string + tube_15mL_string, vol_string])\n      }\n\n    }\n    else if (vol <= 10){\n\n      let num_tubes_1500ul = Math.ceil(vol/well_ceiling_1500ul);\n      let num_tubes_2000ul = Math.ceil(vol/well_ceiling_2000ul);\n\n      let tube_1500ul_string = left_paren + num_tubes_1500ul + right_paren + ' 1.5mL tubes'\n      let tube_2000ul_string = ', or ' + left_paren + num_tubes_2000ul + right_paren + ' 2mL tubes'\n\n      return([tube_1500ul_string + tube_2000ul_string , vol_string]);\n    }\n    else{\n      let labware_count = Math.ceil(vol/well_ceiling_195mL);\n      return([left_paren + labware_count + right_paren + ' Nest 1 Well Reservior(s)', vol_string])\n    }\n  }\n}\n// console.log(find_labware(liquid1.vol));\n\n// module.exports = {find_labware}\nexport default Find_labware;\n","import React, { useState, Fragment } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport \"./App.css\";\nimport data from \"./mock-data.json\";\nimport ReadOnlyRow from \"./components/ReadOnlyRow.js\";\nimport EditableRow from \"./components/EditableRow.js\";\nimport  Find_labware from \"./calculator\";\n\n\nconst App = () => {\n  const [contacts, setContacts] = useState(data);\n\n\n  const [addFormData, setAddFormData] = useState({\n    liquid_name: \"\",\n    vol_per_multiplier: \"\",\n    multiplier: \"\",\n    single_or_multi: \"\",\n  });\n\n  const [editFormData, setEditFormData] = useState({\n    liquid_name: \"\",\n    vol_per_multiplier: \"\",\n    multiplier: \"\",\n    single_or_multi: \"\",\n  });\n\n  const [editContactId, setEditContactId] = useState(null);\n\n  const liquidRecommendedLabware = {}\n  contacts.forEach((contact) => {\n    const castedContact = {\n      ...contact,\n      vol_per_multiplier: Number(contact.vol_per_multiplier),\n      multiplier: Number(contact.multiplier),\n      // vol: Number(multiplier*vol_per_multiplier)\n    }\n    liquidRecommendedLabware[contact.liquid_name] = Find_labware(contact)\n    // liquidRecommendedLabware[contact] = total_volume(contact)\n  })\n  console.log(liquidRecommendedLabware)\n\n\n  const handleAddFormChange = (event) => {\n    event.preventDefault();\n\n    const fieldName = event.target.getAttribute(\"name\");\n    const fieldValue = event.target.value;\n\n    const newFormData = { ...addFormData };\n    newFormData[fieldName] = fieldValue;\n\n    setAddFormData(newFormData);\n  };\n\n  const handleEditFormChange = (event) => {\n    event.preventDefault();\n\n    const fieldName = event.target.getAttribute(\"name\");\n    const fieldValue = event.target.value;\n\n    const newFormData = { ...editFormData };\n    newFormData[fieldName] = fieldValue;\n\n    setEditFormData(newFormData);\n  };\n\n  const handleAddFormSubmit = (event) => {\n    event.preventDefault();\n\n    const newContact = {\n      id: nanoid(),\n      liquid_name: addFormData.liquid_name,\n      vol_per_multiplier: addFormData.vol_per_multiplier,\n      multiplier: addFormData.multiplier,\n      single_or_multi: addFormData.single_or_multi,\n    };\n\n    const newContacts = [...contacts, newContact];\n    setContacts(newContacts);\n  };\n\n  const handleEditFormSubmit = (event) => {\n    event.preventDefault();\n\n    const editedContact = {\n      id: editContactId,\n      liquid_name: editFormData.liquid_name,\n      vol_per_multiplier: editFormData.vol_per_multiplier,\n      multiplier: editFormData.multiplier,\n      single_or_multi: editFormData.single_or_multi,\n    };\n\n    const newContacts = [...contacts];\n\n    const index = contacts.findIndex((contact) => contact.id === editContactId);\n\n    newContacts[index] = editedContact;\n\n    setContacts(newContacts);\n    setEditContactId(null);\n  };\n\n  const handleEditClick = (event, contact) => {\n    event.preventDefault();\n    setEditContactId(contact.id);\n\n    const formValues = {\n      liquid_name: contact.liquid_name,\n      vol_per_multiplier: contact.vol_per_multiplier,\n      multiplier: contact.multiplier,\n      single_or_multi: contact.single_or_multi,\n    };\n\n    setEditFormData(formValues);\n  };\n\n  const handleCancelClick = () => {\n    setEditContactId(null);\n  };\n\n  const handleDeleteClick = (contactId) => {\n    const newContacts = [...contacts];\n\n    const index = contacts.findIndex((contact) => contact.id === contactId);\n\n    newContacts.splice(index, 1);\n\n    setContacts(newContacts);\n  };\n\n\n  return ( <div className=\"app-container\">\n  <form onSubmit={handleEditFormSubmit}>\n    <table>\n      <thead>\n        <tr>\n          <th>Liquid Name</th>\n          <th>Volume per Multiplier (ul)</th>\n          <th>Multiplier (# samplesTESTTEST, # washes, etc.)</th>\n          <th>Single or Multi-Channel</th>\n        </tr>\n      </thead>\n      <tbody>\n            {contacts.map((contact) => (\n              <Fragment>\n                {editContactId === contact.id ? (\n                  <EditableRow\n                    editFormData={editFormData}\n                    handleEditFormChange={handleEditFormChange}\n                    handleCancelClick={handleCancelClick}\n                  />\n                ) : (\n                  <ReadOnlyRow\n                    contact={contact}\n                    handleEditClick={handleEditClick}\n                    handleDeleteClick={handleDeleteClick}\n                  />\n                )}\n              </Fragment>\n            ))}\n          </tbody>\n        </table>\n      </form>\n      <h2>Add a Liquid</h2>\n        <form onSubmit={handleAddFormSubmit}>\n          <input\n            type=\"text\"\n            name=\"liquid_name\"\n            required=\"required\"\n            placeholder=\"Liquid\"\n            onChange={handleAddFormChange}\n          />\n          <input\n            type=\"text\"\n            name=\"vol_per_multiplier\"\n            required=\"required\"\n            placeholder=\"Vol Per Multiplier (ul)\"\n            onChange={handleAddFormChange}\n          />\n          <input\n            type=\"text\"\n            name=\"multiplier\"\n            required=\"required\"\n            placeholder=\"Multiplier\"\n            onChange={handleAddFormChange}\n          />\n          <input\n            type=\"text\"\n            name=\"single_or_multi\"\n            required=\"required\"\n            placeholder=\"`Single` or `Multi`\"\n            onChange={handleAddFormChange}\n          />\n          <button type=\"submit\">Add</button>\n        </form>\n\n        {Object.entries(liquidRecommendedLabware).map(liquidInfo => {\n          const liquidName = liquidInfo[0];\n          const volumeText = liquidInfo[1];\n\n\n        return <h3>\n          <form>\n            <table>\n              <thead>\n                <tr>\n                  <th>{liquidName}</th>\n                  <th>Recommended Labware</th>\n                  <th>Total Volume</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr>\n                    <React.Fragment>\n                    <td></td>\n                    <td>{volumeText[0]}</td>\n                    <td>{volumeText[1]}</td>\n                    </React.Fragment>\n                  </tr>\n                  </tbody>\n                </table>\n              </form>\n            </h3>\n            })};\n        </div>\n      );\n    };\n\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}